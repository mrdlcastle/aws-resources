AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  pLoadBalancerName:
    Type: String
    Default: Name of Load Balancer
  pLoadBalancerType:
    Type: String
    Default: application
  pLoadBalancerScheme:
    Type: String
    Default: internal
  pVPC: 
    Type: AWS::EC2::VPC::Id
    Default: Select the VPC that you will deploy the LoadBalancer into.  
  pSubnet01:
    Type: AWS::EC2::Subnet::Id
    Default: Pick First Subnet for LoadBalancer to communicate with Service
  pSubnet02:
    Type: AWS::EC2::Subnet::Id
    Default: Pick Second Subnet for LoadBalancer to communicate with Service

Resources:
  ElasticLoadBalancingV2LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Ref pLoadBalancerName
      Scheme: !Ref pLoadBalancerScheme
      Type: !Ref pLoadBalancerType
      Subnets:
        - !Ref pSubnet01
        - !Ref pSubnet02
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup #It is setup below
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        -
          Key: "access_logs.s3.enabled"
          Value: "false"
        -
          Key: "idle_timeout.timeout_seconds"
          Value: "600"
        -
          Key: "deletion_protection.enabled"
          Value: "false"
        -
          Key: "routing.http2.enabled"
          Value: "true"
        -
          Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        -
          Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref pLoadBalancerName, LoadBalancerSecurityGroup]]
      VpcId: !Ref pVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
